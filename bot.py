import os
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!
load_dotenv()

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from notion_handler import (
    create_notion_page,
    create_link_page,

)
from transcriber import transcribe_voice
from url_processor import process_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)



# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_keyboard = [["–ò–¥–µ—è", "–ó–∞–¥–∞—á–∞", "–°—Å—ã–ª–∫–∞"]]
main_markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è Notion. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=main_markup,
    )
    return CHOOSING_ACTION

async def choice_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_choice = update.message.text
    context.user_data['choice'] = user_choice

    if user_choice == "–°—Å—ã–ª–∫–∞":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É.", reply_markup=ReplyKeyboardRemove())
        return AWAITING_LINK
    else: # –ò–¥–µ—è –∏–ª–∏ –ó–∞–¥–∞—á–∞
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é '{user_choice.lower()}'.", reply_markup=ReplyKeyboardRemove())
        return AWAITING_INPUT

async def received_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–¥–µ–∏ –∏–ª–∏ –ó–∞–¥–∞—á–∏."""
    choice = context.user_data.get('choice')
    text = ""

    if update.message.voice:
        await update.message.reply_text("–ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é... üéôÔ∏è")
        text = await transcribe_voice(update.message.voice.file_id, context)
        if not text or text.startswith("–û—à–∏–±–∫–∞:"):
            await update.message.reply_text(text or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.")
            return ConversationHandler.END
    else:
        text = update.message.text

    if choice == "–ò–¥–µ—è":
        return await save_idea(update, context, text)
    elif choice == "–ó–∞–¥–∞—á–∞":
        return await start_task_process(update, context, text)

async def save_idea(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ—é –≤ Notion."""
    db_id = os.getenv("NOTION_DATABASE_ID_IDEA")
    title_prop = os.getenv("NOTION_IDEA_PROPERTY_TITLE", "Name")

    if not db_id:
        await update.message.reply_text("ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '–ò–¥–µ–π' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.")
        return ConversationHandler.END


    if result:
        await update.message.reply_text("–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    return ConversationHandler.END

async def start_task_process(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    db_id = os.getenv("NOTION_DATABASE_ID_TASK")
    title_prop = os.getenv("NOTION_TASK_PROPERTY_TITLE", "Name")

    if not db_id:
        await update.message.reply_text("ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '–ó–∞–¥–∞—á' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.")
        return ConversationHandler.END

    # 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    page = await create_notion_page(db_id, title_prop, text)
    if not page:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        return ConversationHandler.END

    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{text}' —Å–æ–∑–¥–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏.")

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    interactive_props_str = os.getenv("NOTION_TASK_INTERACTIVE_PROPERTIES", "")
    properties_to_ask = [p.strip() for p in interactive_props_str.split(',') if p.strip()]

    if not properties_to_ask:
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π.")
        return ConversationHandler.END

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    context.user_data['task_page_id'] = page['id']
    context.user_data['properties_to_ask'] = properties_to_ask
    context.user_data['current_property_index'] = 0
    context.user_data['db_properties'] = await get_database_properties(db_id)

    return await ask_next_task_property(update, context)

async def ask_next_task_property(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Å–ª–µ–¥—É—é—â–µ–º —Å–≤–æ–π—Å—Ç–≤–µ –∑–∞–¥–∞—á–∏."""
    user_data = context.user_data
    idx = user_data['current_property_index']
    properties_to_ask = user_data['properties_to_ask']

    if idx >= len(properties_to_ask):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        return ConversationHandler.END



    if not prop_info or not prop_info.get('options'):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ '{prop_name}' –∏–ª–∏ –µ–≥–æ –æ–ø—Ü–∏–∏ –≤ Notion. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
        user_data['current_property_index'] += 1
        return await ask_next_task_property(update, context)

    keyboard = [
        [InlineKeyboardButton(option, callback_data=f"taskprop_{prop_name}_{option}")]
        for option in prop_info['options']
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ '{prop_name}':", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ '{prop_name}':", reply_markup=reply_markup)

    return SELECTING_TASK_PROPERTY

async def received_task_property(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()

    _, prop_name, value = query.data.split('_', 2)
    page_id = context.user_data['task_page_id']
    prop_info = context.user_data.get('db_properties', {}).get(prop_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    prop_type = prop_info.get('type')
    update_payload = {}
    if prop_type == 'select':
        update_payload[prop_name] = {'select': {'name': value}}
    elif prop_type == 'multi_select':
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ
        update_payload[prop_name] = {'multi_select': [{'name': value}]}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
    await update_page_properties(page_id, update_payload)
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–æ: {prop_name} -> {value}")

    context.user_data['current_property_index'] += 1
    return await ask_next_task_property(update, context)

async def received_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Notion."""
    url = update.message.text
    if not url.startswith("http"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return AWAITING_LINK

    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É... üß†")
    processed_data = await process_url(url)
    if not processed_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.")
        return ConversationHandler.END

    db_id = os.getenv("NOTION_DATABASE_ID_LINK")
    title_prop = os.getenv("NOTION_LINK_PROPERTY_TITLE", "Name")
    url_prop = os.getenv("NOTION_LINK_PROPERTY_URL", "URL")
    tags_prop = os.getenv("NOTION_LINK_PROPERTY_TAGS", "Tags")

    if not db_id:
        await update.message.reply_text("ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '–°—Å—ã–ª–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.")
        return ConversationHandler.END

    result = await create_link_page(db_id, title_prop, url_prop, tags_prop, processed_data)
    if result:
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {processed_data.get('title')}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={

        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()

