import os
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!
load_dotenv()

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from notion_handler import create_notion_page, create_link_page
from transcriber import transcribe_voice
from url_processor import process_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TYPING_REPLY, AWAITING_LINK = range(3)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
reply_keyboard = [
    ["–ò–¥–µ—è", "–ó–∞–¥–∞—á–∞", "–°—Å—ã–ª–∫–∞"],
]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env
CHOICE_TO_DB_SUFFIX = {
    "–ò–¥–µ—è": "IDEA",
    "–ó–∞–¥–∞—á–∞": "TASK",
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–¥–µ–π –∏ –∑–∞–¥–∞—á –≤ Notion. "
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=markup,
    )
    return CHOOSING


async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–≤–æ–¥."""
    user_choice = update.message.text
    context.user_data["choice"] = user_choice

    if user_choice == "–°—Å—ã–ª–∫–∞":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return AWAITING_LINK
    else:
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é '{user_choice.lower()}'. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return TYPING_REPLY


async def received_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Notion."""
    user_data = context.user_data
    text = update.message.text
    choice = user_data.get("choice")

    if not choice:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    db_suffix = CHOICE_TO_DB_SUFFIX.get(choice)
    if not db_suffix:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        user_data.clear()
        return ConversationHandler.END

    database_id = os.getenv(f"NOTION_DATABASE_ID_{db_suffix}")

    if not database_id:
        await update.message.reply_text(f"ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª (NOTION_DATABASE_ID_{db_suffix}).")
        user_data.clear()
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
    result = create_notion_page(database_id, text)

    if result:
        await update.message.reply_text(f"–í–∞—à–∞ '{choice.lower()}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ Notion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    user_data.clear()
    return ConversationHandler.END


async def received_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Notion."""
    user_data = context.user_data
    choice = user_data.get("choice")

    if not choice:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
        return ConversationHandler.END

    await update.message.reply_text("–ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É... üéôÔ∏è")

    voice_file_id = update.message.voice.file_id
    transcribed_text = await transcribe_voice(voice_file_id, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä–∞
    if transcribed_text and transcribed_text.startswith("–û—à–∏–±–∫–∞:"):
        await update.message.reply_text(transcribed_text)
        user_data.clear()
        return ConversationHandler.END

    if not transcribed_text:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        user_data.clear()
        return ConversationHandler.END

    db_suffix = CHOICE_TO_DB_SUFFIX.get(choice)
    if not db_suffix:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        user_data.clear()
        return ConversationHandler.END

    database_id = os.getenv(f"NOTION_DATABASE_ID_{db_suffix}")
    if not database_id:
        await update.message.reply_text(f"ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª (NOTION_DATABASE_ID_{db_suffix}).")
        user_data.clear()
        return ConversationHandler.END

    result = create_notion_page(database_id, transcribed_text)

    if result:
        await update.message.reply_text(
            f"–í–∞—à–∞ '{choice.lower()}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!\n\n"
            f"–¢–µ–∫—Å—Ç: \"{transcribed_text}\""
        )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ Notion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    user_data.clear()
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    user_data = context.user_data
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    user_data.clear()
    return ConversationHandler.END


async def received_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Notion."""
    url = update.message.text
    if not url.startswith("http"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http –∏–ª–∏ https).")
        return AWAITING_LINK # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É

    await update.message.reply_text("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã... üß†")

    processed_data = await process_url(url)

    if not processed_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
        context.user_data.clear()
        return ConversationHandler.END

    database_id = os.getenv("NOTION_DATABASE_ID_LINK")
    if not database_id:
        await update.message.reply_text("ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª (NOTION_DATABASE_ID_LINK).")
        context.user_data.clear()
        return ConversationHandler.END

    result = create_link_page(
        database_id=database_id,
        title=processed_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
        summary=processed_data.get('summary', ''),
        url=processed_data.get('url', url),
        tags=processed_data.get('tags', [])
    )

    if result:
        await update.message.reply_text(
            f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!\n\n"
            f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {processed_data.get('title')}"
        )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å—Å—ã–ª–∫–µ –≤ Notion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    context.user_data.clear()
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–Ω–∏–µ Application
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(
                    filters.Regex("^(–ò–¥–µ—è|–ó–∞–¥–∞—á–∞|–°—Å—ã–ª–∫–∞)$"), choice
                )
            ],
            TYPING_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_message),
                MessageHandler(filters.VOICE, received_voice),
            ],
            AWAITING_LINK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_link)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
